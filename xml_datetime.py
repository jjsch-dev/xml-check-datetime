"""Utility to check the date and time in XML files generated by itktool.
"""
import xml.etree.ElementTree as ET
from datetime import datetime
import argparse
import os

parser = argparse.ArgumentParser(description="xml/text date time parser")
parser.add_argument('--version', action='version', version='%(prog)s 0.1.2')
parser.add_argument("-f", "--filename", required=True, help="filename, select the XML parse, when the extension is xml.")

args = parser.parse_args()


def show_result(invalid, index):
    print("records with invalid datetime {} of a total of {}".format(invalid, index))


def parse_xml(name):
    try:
        tree = ET.parse(name)
        root = tree.getroot()
        index = 0
        invalid = 0
        for mark in root.findall('mark'):
            card_id = mark.find('access_id')
            date_time = mark.find('datetime')

            index += 1
            if not test_datetime(record=index, card_id=card_id.text,
                                 year=date_time.find('year').text, month=date_time.find('month').text,
                                 day=date_time.find('day').text, hour=date_time.find('hour').text,
                                 minute=date_time.find('minute').text, seconds=date_time.find('seconds').text):
                invalid += 1

        show_result(invalid, index)
    except FileNotFoundError:
        print("error file not found")


def test_datetime(record, card_id, year, month, day, hour, minute, seconds):
    try:
        dt = datetime(year=int(year), month=int(month),
                      day=int(day), hour=int(hour),
                      minute=int(minute), second=int(seconds))
    except ValueError:
        print("mark:{} id:{} year:{} month:{} day:{} hour:{} minute:{} seconds: {}".format(record,
                                                                                           card_id,
                                                                                           year,
                                                                                           month,
                                                                                           day,
                                                                                           hour,
                                                                                           minute,
                                                                                           seconds))
        return False
    return True


def parse_text(name):
    try:
        with open(name) as f:
            lines = f.readlines()  # list containing lines of file

            index = 0
            invalid = 0
            for line in lines:
                line = line.strip()  # remove leading/trailing white spaces
                columns = [item.strip() for item in line.split(' ')]
                dt = columns[1].split('/')
                tm = columns[2].split(':')

                index += 1
                if not test_datetime(record=index, card_id=columns[0],
                                     year=dt[2], month=dt[1], day=dt[0],
                                     hour=tm[0], minute=tm[1], seconds=tm[2]):
                    invalid += 1

            show_result(invalid, index)
    except FileNotFoundError:
        print("error file not found")


# Press the green button in the gutter to run the script.
if __name__ == '__main__':
    file_name, file_extension = os.path.splitext(args.filename)

    if file_extension == ".xml":
        parse_xml(args.filename)
    elif file_extension == ".txt":
        parse_text(args.filename)
    else:
        print("error, invalid file extension: {}".format(file_extension))
