"""Utility to check the date and time in XML files generated by itktool.
NOTE: for generate win32 use: WINEARCH=win32 WINEPREFIX=~/win32 wine pyinstaller.exe --onefile xml_datetime.py
      for run win32: WINEARCH=win32 WINEPREFIX=~/win32 sudo wine ./xml_datetime.exe
"""
import xml.etree.ElementTree as ET
from datetime import datetime
import argparse
import os
import platform


parser = argparse.ArgumentParser(description="xml/text date time parser")
parser.add_argument('--version', action='version', version='%(prog)s 0.1.5')
parser.add_argument("-f", "--filename", required=True, help="filename, select the XML parse, when the extension is xml.")
parser.add_argument('--card_id', dest='card_id', action='store_true')
parser.add_argument('--no-card_id', dest='card_id', action='store_false')
parser.add_argument('--event_code', dest='event_code', action='store_true')
parser.add_argument('--no-event_code', dest='even_code', action='store_false')
parser.set_defaults(feature=False, event_code=False)

args = parser.parse_args()

dt_last = None

records = 0
invalid = []
datetime_out_sequence = []
id_out_sequence = []
invalid_event_code = []
source_dict = {}


def parse_xml(name):
    global records, invalid
    try:
        tree = ET.parse(name)
        root = tree.getroot()

        for mark in root.findall('mark'):
            card_id = mark.find('access_id')
            date_time = mark.find('datetime')
            source = mark.find("source")
            event_code = mark.find("event_code")

            records += 1
            check_datetime(card_id=card_id.text,
                           year=date_time.find('year').text, month=date_time.find('month').text,
                           day=date_time.find('day').text, hour=date_time.find('hour').text,
                           minute=date_time.find('minute').text, seconds=date_time.find('seconds').text)

            if args.card_id:
                check_card_id(card_id=card_id.text, source=source.text)

            if args.event_code:
                check_event_code(card_id=card_id.text, event_code=event_code.text)

    except FileNotFoundError:
        print("error file not found")


def check_datetime(card_id, year, month, day, hour, minute, seconds):
    global dt_last, invalid, datetime_out_sequence, records

    str_log = "mark:{} id:{} year:{} "\
              "month:{} day:{} hour:{} "\
              "minute:{} seconds: {}".format(records,
                                             card_id,
                                             year,
                                             month,
                                             day,
                                             hour,
                                             minute,
                                             seconds)
    try:
        dt = datetime(year=int(year), month=int(month),
                      day=int(day), hour=int(hour),
                      minute=int(minute), second=int(seconds))
        if dt_last is None:
            dt_last = dt
        elif dt < dt_last:
            datetime_out_sequence.append(str_log)
        dt_last = dt
    except ValueError:
        invalid.append(str_log)


def check_card_id(card_id, source):
    global source_dict, records
    if source in source_dict:
        last_id = source_dict[source]
    else:
        last_id = card_id

    if int(card_id) < int(last_id):
        id_out_sequence.append("mark: {} id: {} source :{}".format(records, card_id, source))
        card_id = last_id

    source_dict[source] = card_id


def check_event_code(card_id, event_code):
    global invalid_event_code
    if event_code != "1":
        invalid_event_code.append("mark: {} id: {} event_code :{}".format(records, card_id, event_code))


def parse_text(name):
    global records, invalid
    try:
        with open(name) as f:
            lines = f.readlines()  # list containing lines of file

            for line in lines:
                line = line.strip()  # remove leading/trailing white spaces
                columns = [item.strip() for item in line.split(' ')]
                dt = columns[1].split('/')
                tm = columns[2].split(':')

                records += 1
                check_datetime(card_id=columns[0],
                               year=dt[2], month=dt[1], day=dt[0],
                               hour=tm[0], minute=tm[1], seconds=tm[2])
    except FileNotFoundError:
        print("error file not found")


# Press the green button in the gutter to run the script.
if __name__ == '__main__':
    print("\nos: {} - arch: {} - cpu: {}\n".format(platform.system(),
                                                   platform.architecture(),
                                                   platform.processor()))

    file_name, file_extension = os.path.splitext(args.filename)

    if file_extension == ".xml":
        parse_xml(args.filename)
    elif file_extension == ".txt":
        parse_text(args.filename)
    else:
        print("error, invalid file extension: {}".format(file_extension))
        exit(0)

    if len(invalid):
        print("invalid datetime\n")
        for item in invalid:
            print(item)

    if len(datetime_out_sequence):
        print("\ndatetime out of sequence\n")
        for item in datetime_out_sequence:
            print(item)

    if len(id_out_sequence):
        print("\nid out of sequence\n")
        for item in id_out_sequence:
            print(item)

    if len(invalid_event_code):
        print("\ninvalid event code\n")
        for item in invalid_event_code:
            print(item)

    print("\nfrom {} records, {} have invalid datetime, "
          "{} dates are out of sequence, "
          "{} id out of sequence and "
          "{} invalid even code".format(records,
                                        len(invalid),
                                        len(datetime_out_sequence),
                                        len(id_out_sequence),
                                        len(invalid_event_code)))

